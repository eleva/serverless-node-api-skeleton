import {GetSecretValueCommand,SecretsManagerClient} from "@aws-sdk/client-secrets-manager";
import mysql from "serverless-mysql";
import mysql2 from "mysql2";

const prepareResponse = function(result,statusCode){
    return {
        statusCode: statusCode,
        body: JSON.stringify(result,
            null,
            2
        ),
    };
}

const parseBody = function(body){
    return typeof body === 'string' ? JSON.parse(body) : body;
}

const getSecretValue = async (secretName = "SECRET_NAME") => {

    const config =
        process.env.APP_ENV==='local'?
            {
                region: process.env.AWS_REGION, // Change this to your desired AWS region
                credentials: {
                    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
                    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
                }
            }
            :{};

    const client = new SecretsManagerClient(config);

    try {
        const response = await client.send(
            new GetSecretValueCommand({
                SecretId: secretName,
            }),
        );

        if (response.SecretString) {
            return response.SecretString;
        }

        if (response.SecretBinary) {
            return response.SecretBinary;
        }

    } catch (err){
        if (err.code === 'DecryptionFailureException')
            // Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            // Deal with the exception here, and/or rethrow at your discretion.
            console.log(err);
        else if (err.code === 'InternalServiceErrorException')
            // An error occurred on the server side.
            // Deal with the exception here, and/or rethrow at your discretion.
            console.log(err);
        else if (err.code === 'InvalidParameterException')
            // You provided an invalid value for a parameter.
            // Deal with the exception here, and/or rethrow at your discretion.
            console.log(err);
        else if (err.code === 'InvalidRequestException')
            // You provided a parameter value that is not valid for the current state of the resource.
            // Deal with the exception here, and/or rethrow at your discretion.
            console.log(err);
        else if (err.code === 'ResourceNotFoundException')
            // We can't find the resource that you asked for.
            // Deal with the exception here, and/or rethrow at your discretion.
            console.log(err);
    }

};

const getDbCredentials = async () => {
    let host = process.env.DB_HOST
    let username = process.env.DB_USERNAME;
    let password = process.env.DB_PASSWORD;
    let dbname = process.env.DB_DATABASE;

    if(process.env.DB_SECRET){
        let secret = await getSecretValue(process.env.DB_SECRET);
        console.log(secret);
        if(secret){
            secret = JSON.parse(secret);
            host = secret.host;
            username = secret.username;
            password = secret.password;
            dbname = secret.dbname;
        }
    }

    return {
        host,
        username,
        password,
        dbname
    }
}

const getDbClient = async () => {
    const dbCredentials = await getDbCredentials();
    const dbClient = mysql({
        library: mysql2, //reference mysql2 for faster driver and support mysql8
        config: { //load config
            host     : dbCredentials.host, //host from env file
            database : dbCredentials.dbname, //db from env file
            user     : dbCredentials.username, //user from env filet or secret
            password : dbCredentials.password //pass from env file or secret
        }
    })
    return dbClient;
}

const utils = {
    parseBody,
    prepareResponse,
    getSecretValue,
    getDbCredentials,
    getDbClient
}

export {
    utils
};
